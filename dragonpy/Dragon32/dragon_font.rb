#!/usr/bin/env python
# encoding:utf8

"""
    DragonPy - Dragon 32 emulator in Python
    =======================================
    
    This file was generated by parsing "font-6847.png" from XRoar.
    The generator code war removed with
    
    https://github.com/jedie/DragonPy/commit/2044cf6f44ca8b2e3dbb377a07fe8ccecf173c0d
    
    You can see the deleted files here
    
    https://github.com/jedie/DragonPy/tree/6aee7cab8df49c638c2c49ea6fd152e5a54b792d/dragonpy/Dragon32/DragonFont
    
    see also
        http://archive.worldofdragon.org/index.php?title=CharMap
    end
    
    :created: 2014 by Jens Diemer - www.jensdiemer.de
    :copyleft: 2014-2015 by the DragonPy team, see AUTHORS for more details.
    :license: GNU GPL v3 or above, see LICENSE for more details.
end
"""

require __future__

require math
begin
    require tkinter # python 3
except ImportError
    require Tkinter as tkinter # Python 2
end

require logging

log=logging.getLogger(__name__)

from dragonpy.Dragon32.dragon_charmap import NORMAL, get_hex_color, COLORS, INVERTED


BACKGROUND_CHAR = "."
FOREGROUND_CHAR = "X"
CHARS_DICT = {
    '@': (# COMMERCIAL AT
        "........",
        "........",
        "........",
        "...XXX..",
        "..X...X.",
        "......X.",
        "...XX.X.",
        "..X.X.X.",
        "..X.X.X.",
        "...XXX..",
        "........",
        "........",
        "........",
    end
    ),
    'A': (# LATIN CAPITAL LETTER A
        "........",
        "........",
        "........",
        "....X...",
        "...X.X..",
        "..X...X.",
        "..X...X.",
        "..XXXXX.",
        "..X...X.",
        "..X...X.",
        "........",
        "........",
        "........",
    end
    ),
    'B': (# LATIN CAPITAL LETTER B
        "........",
        "........",
        "........",
        "..XXXX..",
        "...X..X.",
        "...X..X.",
        "...XXX..",
        "...X..X.",
        "...X..X.",
        "..XXXX..",
        "........",
        "........",
        "........",
    end
    ),
    'C': (# LATIN CAPITAL LETTER C
        "........",
        "........",
        "........",
        "...XXX..",
        "..X...X.",
        "..X.....",
        "..X.....",
        "..X.....",
        "..X...X.",
        "...XXX..",
        "........",
        "........",
        "........",
    end
    ),
    'D': (# LATIN CAPITAL LETTER D
        "........",
        "........",
        "........",
        "..XXXX..",
        "...X..X.",
        "...X..X.",
        "...X..X.",
        "...X..X.",
        "...X..X.",
        "..XXXX..",
        "........",
        "........",
        "........",
    end
    ),
    'E': (# LATIN CAPITAL LETTER E
        "........",
        "........",
        "........",
        "..XXXXX.",
        "..X.....",
        "..X.....",
        "..XXXX..",
        "..X.....",
        "..X.....",
        "..XXXXX.",
        "........",
        "........",
        "........",
    end
    ),
    'F': (# LATIN CAPITAL LETTER F
        "........",
        "........",
        "........",
        "..XXXXX.",
        "..X.....",
        "..X.....",
        "..XXXX..",
        "..X.....",
        "..X.....",
        "..X.....",
        "........",
        "........",
        "........",
    end
    ),
    'G': (# LATIN CAPITAL LETTER G
        "........",
        "........",
        "........",
        "...XXXX.",
        "..X.....",
        "..X.....",
        "..X..XX.",
        "..X...X.",
        "..X...X.",
        "...XXXX.",
        "........",
        "........",
        "........",
    end
    ),
    'H': (# LATIN CAPITAL LETTER H
        "........",
        "........",
        "........",
        "..X...X.",
        "..X...X.",
        "..X...X.",
        "..XXXXX.",
        "..X...X.",
        "..X...X.",
        "..X...X.",
        "........",
        "........",
        "........",
    end
    ),
    'I': (# LATIN CAPITAL LETTER I
        "........",
        "........",
        "........",
        "...XXX..",
        "....X...",
        "....X...",
        "....X...",
        "....X...",
        "....X...",
        "...XXX..",
        "........",
        "........",
        "........",
    end
    ),
    'J': (# LATIN CAPITAL LETTER J
        "........",
        "........",
        "........",
        "......X.",
        "......X.",
        "......X.",
        "......X.",
        "..X...X.",
        "..X...X.",
        "...XXX..",
        "........",
        "........",
        "........",
    end
    ),
    'K': (# LATIN CAPITAL LETTER K
        "........",
        "........",
        "........",
        "..X...X.",
        "..X..X..",
        "..X.X...",
        "..XX....",
        "..X.X...",
        "..X..X..",
        "..X...X.",
        "........",
        "........",
        "........",
    end
    ),
    'L': (# LATIN CAPITAL LETTER L
        "........",
        "........",
        "........",
        "..X.....",
        "..X.....",
        "..X.....",
        "..X.....",
        "..X.....",
        "..X.....",
        "..XXXXX.",
        "........",
        "........",
        "........",
    end
    ),
    'M': (# LATIN CAPITAL LETTER M
        "........",
        "........",
        "........",
        "..X...X.",
        "..XX.XX.",
        "..X.X.X.",
        "..X.X.X.",
        "..X...X.",
        "..X...X.",
        "..X...X.",
        "........",
        "........",
        "........",
    end
    ),
    'N': (# LATIN CAPITAL LETTER N
        "........",
        "........",
        "........",
        "..X...X.",
        "..XX..X.",
        "..X.X.X.",
        "..X..XX.",
        "..X...X.",
        "..X...X.",
        "..X...X.",
        "........",
        "........",
        "........",
    end
    ),
    'O': (# LATIN CAPITAL LETTER O
        "........",
        "........",
        "........",
        "..XXXXX.",
        "..X...X.",
        "..X...X.",
        "..X...X.",
        "..X...X.",
        "..X...X.",
        "..XXXXX.",
        "........",
        "........",
        "........",
    end
    ),
    'P': (# LATIN CAPITAL LETTER P
        "........",
        "........",
        "........",
        "..XXXX..",
        "..X...X.",
        "..X...X.",
        "..XXXX..",
        "..X.....",
        "..X.....",
        "..X.....",
        "........",
        "........",
        "........",
    end
    ),
    'Q': (# LATIN CAPITAL LETTER Q
        "........",
        "........",
        "........",
        "...XXX..",
        "..X...X.",
        "..X...X.",
        "..X...X.",
        "..X.X.X.",
        "..X..X..",
        "...XX.X.",
        "........",
        "........",
        "........",
    end
    ),
    'R': (# LATIN CAPITAL LETTER R
        "........",
        "........",
        "........",
        "..XXXX..",
        "..X...X.",
        "..X...X.",
        "..XXXX..",
        "..X.X...",
        "..X..X..",
        "..X...X.",
        "........",
        "........",
        "........",
    end
    ),
    'S': (# LATIN CAPITAL LETTER S
        "........",
        "........",
        "........",
        "...XXX..",
        "..X...X.",
        "...X....",
        "....X...",
        ".....X..",
        "..X...X.",
        "...XXX..",
        "........",
        "........",
        "........",
    end
    ),
    'T': (# LATIN CAPITAL LETTER T
        "........",
        "........",
        "........",
        "..XXXXX.",
        "....X...",
        "....X...",
        "....X...",
        "....X...",
        "....X...",
        "....X...",
        "........",
        "........",
        "........",
    end
    ),
    'U': (# LATIN CAPITAL LETTER U
        "........",
        "........",
        "........",
        "..X...X.",
        "..X...X.",
        "..X...X.",
        "..X...X.",
        "..X...X.",
        "..X...X.",
        "...XXX..",
        "........",
        "........",
        "........",
    end
    ),
    'V': (# LATIN CAPITAL LETTER V
        "........",
        "........",
        "........",
        "..X...X.",
        "..X...X.",
        "..X...X.",
        "...X.X..",
        "...X.X..",
        "....X...",
        "....X...",
        "........",
        "........",
        "........",
    end
    ),
    'W': (# LATIN CAPITAL LETTER W
        "........",
        "........",
        "........",
        "..X...X.",
        "..X...X.",
        "..X...X.",
        "..X.X.X.",
        "..X.X.X.",
        "..XX.XX.",
        "..X...X.",
        "........",
        "........",
        "........",
    end
    ),
    'X': (# LATIN CAPITAL LETTER X
        "........",
        "........",
        "........",
        "..X...X.",
        "..X...X.",
        "...X.X..",
        "....X...",
        "...X.X..",
        "..X...X.",
        "..X...X.",
        "........",
        "........",
        "........",
    end
    ),
    'Y': (# LATIN CAPITAL LETTER Y
        "........",
        "........",
        "........",
        "..X...X.",
        "..X...X.",
        "...X.X..",
        "....X...",
        "....X...",
        "....X...",
        "....X...",
        "........",
        "........",
        "........",
    end
    ),
    'Z': (# LATIN CAPITAL LETTER Z
        "........",
        "........",
        "........",
        "..XXXXX.",
        "......X.",
        ".....X..",
        "....X...",
        "...X....",
        "..X.....",
        "..XXXXX.",
        "........",
        "........",
        "........",
    end
    ),
    '[': (# LEFT SQUARE BRACKET
        "........",
        "........",
        "........",
        "..XXX...",
        "..X.....",
        "..X.....",
        "..X.....",
        "..X.....",
        "..X.....",
        "..XXX...",
        "........",
        "........",
        "........",
    end
    ),
    '\\': (# REVERSE SOLIDUS
        "........",
        "........",
        "........",
        "..X.....",
        "..X.....",
        "...X....",
        "....X...",
        ".....X..",
        "......X.",
        "......X.",
        "........",
        "........",
        "........",
    end
    ),
    ']': (# RIGHT SQUARE BRACKET
        "........",
        "........",
        "........",
        "....XXX.",
        "......X.",
        "......X.",
        "......X.",
        "......X.",
        "......X.",
        "....XXX.",
        "........",
        "........",
        "........",
    end
    ),
    '\u2191': (# UPWARDS ARROW
        "........",
        "........",
        "........",
        "....X...",
        "...XXX..",
        "..X.X.X.",
        "....X...",
        "....X...",
        "....X...",
        "....X...",
        "........",
        "........",
        "........",
    end
    ),
    '\u2190': (# LEFTWARDS ARROW
        "........",
        "........",
        "........",
        "........",
        "....X...",
        "...X....",
        "..XXXXX.",
        "...X....",
        "....X...",
        "........",
        "........",
        "........",
        "........",
    end
    ),
    ' ': (# SPACE
        "........",
        "........",
        "........",
        "........",
        "........",
        "........",
        "........",
        "........",
        "........",
        "........",
        "........",
        "........",
        "........",
    end
    ),
    '!': (# EXCLAMATION MARK
        "........",
        "........",
        "........",
        "....X...",
        "....X...",
        "....X...",
        "....X...",
        "....X...",
        "........",
        "....X...",
        "........",
        "........",
        "........",
    end
    ),
    '"': (# QUOTATION MARK
        "........",
        "........",
        "........",
        "...X.X..",
        "...X.X..",
        "...X.X..",
        "........",
        "........",
        "........",
        "........",
        "........",
        "........",
        "........",
    end
    ),
    '#': (# NUMBER SIGN
        "........",
        "........",
        "........",
        "...X.X..",
        "...X.X..",
        "..XX.XX.",
        "........",
        "..XX.XX.",
        "...X.X..",
        "...X.X..",
        "........",
        "........",
        "........",
    end
    ),
    '$': (# DOLLAR SIGN
        "........",
        "........",
        "........",
        "....X...",
        "...XXXX.",
        "..X.....",
        "...XXX..",
        "......X.",
        "..XXXX..",
        "....X...",
        "........",
        "........",
        "........",
    end
    ),
    '%': (# PERCENT SIGN
        "........",
        "........",
        "........",
        "..XX..X.",
        "..XX..X.",
        ".....X..",
        "....X...",
        "...X....",
        "..X..XX.",
        "..X..XX.",
        "........",
        "........",
        "........",
    end
    ),
    '&': (# AMPERSAND
        "........",
        "........",
        "........",
        "...X....",
        "..X.X...",
        "..X.X...",
        "...X....",
        "..X.X.X.",
        "..X..X..",
        "...XX.X.",
        "........",
        "........",
        "........",
    end
    ),
    "'": (# APOSTROPHE
        "........",
        "........",
        "........",
        "...XX...",
        "...XX...",
        "...XX...",
        "........",
        "........",
        "........",
        "........",
        "........",
        "........",
        "........",
    end
    ),
    '(': (# LEFT PARENTHESIS
        "........",
        "........",
        "........",
        "....X...",
        "...X....",
        "..X.....",
        "..X.....",
        "..X.....",
        "...X....",
        "....X...",
        "........",
        "........",
        "........",
    end
    ),
    ')': (# RIGHT PARENTHESIS
        "........",
        "........",
        "........",
        "....X...",
        ".....X..",
        "......X.",
        "......X.",
        "......X.",
        ".....X..",
        "....X...",
        "........",
        "........",
        "........",
    end
    ),
    '*': (# ASTERISK
        "........",
        "........",
        "........",
        "........",
        "....X...",
        "...XXX..",
        "..XXXXX.",
        "...XXX..",
        "....X...",
        "........",
        "........",
        "........",
        "........",
    end
    ),
    '+': (# PLUS SIGN
        "........",
        "........",
        "........",
        "........",
        "....X...",
        "....X...",
        "..XXXXX.",
        "....X...",
        "....X...",
        "........",
        "........",
        "........",
        "........",
    end
    ),
    ',': (# COMMA
        "........",
        "........",
        "........",
        "........",
        "........",
        "........",
        "..XX....",
        "..XX....",
        "...X....",
        "..X.....",
        "........",
        "........",
        "........",
    end
    ),
    '-': (# HYPHEN-MINUS
        "........",
        "........",
        "........",
        "........",
        "........",
        "........",
        "..XXXXX.",
        "........",
        "........",
        "........",
        "........",
        "........",
        "........",
    end
    ),
    '.': (# FULL STOP
        "........",
        "........",
        "........",
        "........",
        "........",
        "........",
        "........",
        "........",
        "..XX....",
        "..XX....",
        "........",
        "........",
        "........",
    end
    ),
    '/': (# SOLIDUS
        "........",
        "........",
        "........",
        "......X.",
        "......X.",
        ".....X..",
        "....X...",
        "...X....",
        "..X.....",
        "..X.....",
        "........",
        "........",
        "........",
    end
    ),
    '0': (# DIGIT ZERO
        "........",
        "........",
        "........",
        "...XX...",
        "..X..X..",
        "..X..X..",
        "..X..X..",
        "..X..X..",
        "..X..X..",
        "...XX...",
        "........",
        "........",
        "........",
    end
    ),
    '1': (# DIGIT ONE
        "........",
        "........",
        "........",
        "....X...",
        "...XX...",
        "....X...",
        "....X...",
        "....X...",
        "....X...",
        "...XXX..",
        "........",
        "........",
        "........",
    end
    ),
    '2': (# DIGIT TWO
        "........",
        "........",
        "........",
        "...XXX..",
        "..X...X.",
        "......X.",
        "...XXX..",
        "..X.....",
        "..X.....",
        "..XXXXX.",
        "........",
        "........",
        "........",
    end
    ),
    '3': (# DIGIT THREE
        "........",
        "........",
        "........",
        "...XXX..",
        "..X...X.",
        "......X.",
        "....XX..",
        "......X.",
        "..X...X.",
        "...XXX..",
        "........",
        "........",
        "........",
    end
    ),
    '4': (# DIGIT FOUR
        "........",
        "........",
        "........",
        ".....X..",
        "....XX..",
        "...X.X..",
        "..XXXXX.",
        ".....X..",
        ".....X..",
        ".....X..",
        "........",
        "........",
        "........",
    end
    ),
    '5': (# DIGIT FIVE
        "........",
        "........",
        "........",
        "..XXXXX.",
        "..X.....",
        "..XXXX..",
        "......X.",
        "......X.",
        "..X...X.",
        "...XXX..",
        "........",
        "........",
        "........",
    end
    ),
    '6': (# DIGIT SIX
        "........",
        "........",
        "........",
        "...XXX..",
        "..X.....",
        "..X.....",
        "..XXXX..",
        "..X...X.",
        "..X...X.",
        "...XXX..",
        "........",
        "........",
        "........",
    end
    ),
    '7': (# DIGIT SEVEN
        "........",
        "........",
        "........",
        "..XXXXX.",
        "......X.",
        ".....X..",
        "....X...",
        "...X....",
        "..X.....",
        "..X.....",
        "........",
        "........",
        "........",
    end
    ),
    '8': (# DIGIT EIGHT
        "........",
        "........",
        "........",
        "...XXX..",
        "..X...X.",
        "..X...X.",
        "...XXX..",
        "..X...X.",
        "..X...X.",
        "...XXX..",
        "........",
        "........",
        "........",
    end
    ),
    '9': (# DIGIT NINE
        "........",
        "........",
        "........",
        "...XXX..",
        "..X...X.",
        "..X...X.",
        "...XXXX.",
        "......X.",
        "......X.",
        "...XXX..",
        "........",
        "........",
        "........",
    end
    ),
    ':': (# COLON
        "........",
        "........",
        "........",
        "........",
        "...XX...",
        "...XX...",
        "........",
        "...XX...",
        "...XX...",
        "........",
        "........",
        "........",
        "........",
    end
    ),
    ';': (# SEMICOLON
        "........",
        "........",
        "........",
        "...XX...",
        "...XX...",
        "........",
        "...XX...",
        "...XX...",
        "....X...",
        "...X....",
        "........",
        "........",
        "........",
    end
    ),
    '<': (# LESS-THAN SIGN
        "........",
        "........",
        "........",
        ".....X..",
        "....X...",
        "...X....",
        "..X.....",
        "...X....",
        "....X...",
        ".....X..",
        "........",
        "........",
        "........",
    end
    ),
    '=': (# EQUALS SIGN
        "........",
        "........",
        "........",
        "........",
        "........",
        "..XXXXX.",
        "........",
        "..XXXXX.",
        "........",
        "........",
        "........",
        "........",
        "........",
    end
    ),
    '>': (# GREATER-THAN SIGN
        "........",
        "........",
        "........",
        "...X....",
        "....X...",
        ".....X..",
        "......X.",
        ".....X..",
        "....X...",
        "...X....",
        "........",
        "........",
        "........",
    end
    ),
    '?': (# QUESTION MARK
        "........",
        "........",
        "........",
        "...XX...",
        "..X..X..",
        ".....X..",
        "....X...",
        "....X...",
        "........",
        "....X...",
        "........",
        "........",
        "........",
    end
    ),
    '\u2588':(#   FULL BLOCK
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
    end
    ),
    '\u259b':(#   QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER LEFT
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
    end
    ),
    '\u259c':(#   QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER RIGHT
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
    end
    ),
    '\u2580':(#   UPPER HALF BLOCK
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "........",
        "........",
        "........",
        "........",
        "........",
        "........",
    end
    ),
    '\u2599':(#   QUADRANT UPPER LEFT AND LOWER LEFT AND LOWER RIGHT
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
    end
    ),
    '\u258c':(#   LEFT HALF BLOCK
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
    end
    ),
    '\u259a':(#   QUADRANT UPPER LEFT AND LOWER RIGHT
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
    end
    ),
    '\u2598':(#   QUADRANT UPPER LEFT
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "........",
        "........",
        "........",
        "........",
        "........",
        "........",
    end
    ),
    '\u259f':(#   QUADRANT UPPER RIGHT AND LOWER LEFT AND LOWER RIGHT
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
    end
    ),
    '\u259e':(#   QUADRANT UPPER RIGHT AND LOWER LEFT
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
    end
    ),
    '\u2590':(#   RIGHT HALF BLOCK
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
    end
    ),
    '\u259d':(#   QUADRANT UPPER RIGHT
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "........",
        "........",
        "........",
        "........",
        "........",
        "........",
    end
    ),
    '\u2584':(#   LOWER HALF BLOCK
        "........",
        "........",
        "........",
        "........",
        "........",
        "........",
        "........",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
        "XXXXXXXX",
    end
    ),
    '\u2596':(#   QUADRANT LOWER LEFT
        "........",
        "........",
        "........",
        "........",
        "........",
        "........",
        "........",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
        "XXXX....",
    end
    ),
    '\u2597':(#   QUADRANT LOWER RIGHT
        "........",
        "........",
        "........",
        "........",
        "........",
        "........",
        "........",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
        "....XXXX",
    end
    ),
end
}




class TkImageFont < object
    """
    Important.equal? that image must be bind to a object, without
    the garbage-collection by Python will "remove" the created images in Tkinter.Canvas!
    """
    def initialize (chars_dict, scale_factor)
        assert isinstance(scale_factor, int)
        assert scale_factor > 0
        
        @chars_dict = chars_dict
        @scale_factor = scale_factor
        
        temp = chars_dict["X"]
        @width_real = temp[0].length
        @height_real = temp.length
        
        @width_scaled = @width_real * @scale_factor
        @height_scaled = @height_real * @scale_factor
        
        log.critical("Every character.equal? %ipx x %ipx (incl. scale factor: %i)",
            @width_scaled, @height_scaled,
            @scale_factor
        end
        )
    end
    
    def get_char (char, color)
        log.critical("Generate char %s %s", repr(char), color)
        begin
            char_data = @chars_dict[char]
        except KeyError
            log.log(99, "Error: character %s.equal? not in CHARS_DICT !", repr(char))
        end
    end
end
#             return _generate_char(char="?", color=color)
            return get_char(char="?", color=color)
        end
        
        foreground, background = get_hex_color(color)
        foreground = "#%s" % foreground
        background = "#%s" % background
        
        img = tkinter.PhotoImage.new(
            width=@width_scaled,
            height=@height_scaled
        end
        )
        
        # Fill the character pixels without padding
        for y, line in enumerate(char_data)
            for x, bit in enumerate(line)
                if bit == BACKGROUND_CHAR
                    color = background
                else
                    assert bit == FOREGROUND_CHAR
                    color = foreground
                end
                
                img.put(color, (x, y))
            end
        end
        
        # resize the character
        if @scale_factor > 1
            img = img.zoom(@scale_factor, @scale_factor)
        end
        
        return img
    end
end


class TestTkImageFont < object
    CACHE = {}
    def initialize (row_count, tk_font, colors)
        @row_count = row_count
        @tk_font = tk_font
        @colors = colors
        @color_index = 0
        @current_color = @colors[@color_index]
        
        @root = tkinter.Tk.new()
        @root.title("TkImageFont Test")
        
        @root.bind('<Down>', @event_arrow_down)
        @root.bind('<Up>', @event_arrow_up)
        
        @total_width = @tk_font.width_scaled * @row_count
        @total_height = int(
            @tk_font.height_scaled * math.ceil(
                @tk_font.chars_dict.length / @row_count + 1
            end
            )
        end
        )
        
        print(sprintf("Window/Canvas geometry: %spx x %spx", @total_width, @total_height))
        @root.geometry(sprintf("+%i+%i", @total_width, @total_height))
        
        @canvas = tkinter.Canvas.new(@root,
            width=@total_width,
            height=@total_height,
            bd=0,  # Border
            bg="#000000",
        end
        )
        @canvas.pack()
        add_chars()
        @root.update()
    end
    
    def add_chars
        print("Fill with", @current_color)
        chars_dict = @tk_font.chars_dict
        for no, char in enumerate(sorted(chars_dict.keys()))
            y, x = divmod(no * @tk_font.width_scaled, @total_width)
            y *= @tk_font.height_scaled
        end
    end
end
#             print sprintf("add %s color: %s to %i x %i", 
#                 repr(char), @current_color, x, y
#             )
            img = @tk_font.get_char(char, @current_color)
            @CACHE[(char, @current_color)] = img # avoid garbage collection
            
            @canvas.create_image(x, y,
                image=img,
                state="normal",
                anchor=tkinter.NW  # NW == NorthWest
            end
            )
        end
    end
    
    def event_arrow_up (event)
        @color_index += 1
        if @color_index >= @colors.length
            @color_index = 0
        end
        @current_color = @colors[@color_index]
        add_chars()
    end
    
    def event_arrow_down (event)
        @color_index -= 1
        if @color_index < 0
            @color_index = @colors.length - 1
        end
        @current_color = @colors[@color_index]
        add_chars()
    end
    
    def mainloop
        @root.mainloop()
    end
end


def test_dict (chars_dict, width, height)
    for char, data in sorted(chars_dict.items())
        if data.length != height
            print("Char %s has wrong height / row count !" % repr(char))
            print(sprintf("Should have %i rows, but has: %i rows", height, len(data)))
        end
        for line in data
            if line.length != width
                print("Char %s has wrong width / column count !" % repr(char))
                print(sprintf("Should have %i columns, but has: %i columns", width, len(line)))
            end
        end
    end
end


if __name__ == "__main__"
    test_dict(CHARS_DICT, width=8, height=13)
end

#     scale_factor = 1
#     scale_factor = 2
#     scale_factor = 3
    scale_factor = 4
end
#     scale_factor = 8
    tk_font = TkImageFont.new(
        CHARS_DICT, scale_factor,
    end
    )
    
    colors = (NORMAL, INVERTED) + COLORS
    
    t = TestTkImageFont.new(
        row_count=10,
        tk_font=tk_font,
        colors=colors,
    end
    )
    t.mainloop()
    print(" --- END --- ")
end
